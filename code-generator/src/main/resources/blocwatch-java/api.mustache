package {{package}};

import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiException;

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;{{/fullJavaUtil}}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
    private ApiClient {{localVariablePrefix}}apiClient;

    public {{classname}}() {
        this(new ApiClient());
    }

    @Autowired
    public {{classname}}(ApiClient apiClient) {
        this.{{localVariablePrefix}}apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return {{localVariablePrefix}}apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.{{localVariablePrefix}}apiClient = apiClient;
    }

    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
{{#responses}}     * <p><b>{{code}}</b>{{#message}} - {{message}}{{/message}}
{{/responses}}{{#allParams}}     * @param {{paramName}} {{description}}{{^description}}The {{paramName}} parameter{{/description}}
{{/allParams}}{{#returnType}}     * @return {{returnType}}
{{/returnType}}     * @throws ApiException if an error occurs while attempting to invoke the API
{{#externalDocs}}
    * {{description}}
    * @see <a href="{{url}}">{{summary}} Documentation</a>
{{/externalDocs}}
     */
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}(
        {{#vendorExtensions.x-blocwatch-GetMethodRequestType}}
          {{vendorExtensions.x-blocwatch-GetMethodRequestType}} request
        {{/vendorExtensions.x-blocwatch-GetMethodRequestType}}{{^vendorExtensions.x-blocwatch-GetMethodRequestType}}
          {{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}
        {{/vendorExtensions.x-blocwatch-GetMethodRequestType}}) throws ApiException {

        Object {{localVariablePrefix}}postBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#allParams}}{{#required}}
        // verify the required parameter '{{>api_param_accessor}}' is set
        if ({{>api_param_accessor}} == null) {
            throw new HttpClientErrorException(
                HttpStatus.BAD_REQUEST,
                "Missing the required parameter '{{>api_param_accessor}}' when calling {{operationId}}");
        }
        {{/required}}{{/allParams}}{{#hasPathParams}}
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();{{#pathParams}}
        uriVariables.put("{{baseName}}", {{>api_param_accessor}});{{/pathParams}}{{/hasPathParams}}
        String {{localVariablePrefix}}path = UriComponentsBuilder.fromPath("{{{path}}}"){{#hasPathParams}}.buildAndExpand(uriVariables){{/hasPathParams}}{{^hasPathParams}}.build(){{/hasPathParams}}.toUriString();
        
        final MultiValueMap<String, String> {{localVariablePrefix}}queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders {{localVariablePrefix}}headerParams = new HttpHeaders();
        final MultiValueMap<String, Object> {{localVariablePrefix}}formParams = new LinkedMultiValueMap<String, Object>();{{#hasQueryParams}}
        
        {{#queryParams}}{{localVariablePrefix}}queryParams.putAll({{localVariablePrefix}}apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{collectionFormat}}}".toUpperCase()){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{>api_param_accessor}}));{{#hasMore}}
        {{/hasMore}}{{/queryParams}}{{/hasQueryParams}}{{#hasHeaderParams}}
        
        {{#headerParams}}if ({{>api_param_accessor}} != null)
        {{localVariablePrefix}}headerParams.add("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString({{>api_param_accessor}}));{{#hasMore}}
        {{/hasMore}}{{/headerParams}}{{/hasHeaderParams}}{{#hasFormParams}}
        
        {{#formParams}}if ({{>api_param_accessor}} != null)
            {{localVariablePrefix}}formParams.add("{{baseName}}", {{#isFile}}new FileSystemResource({{>api_param_accessor}}){{/isFile}}{{^isFile}}{{>api_param_accessor}}{{/isFile}});{{#hasMore}}
        {{/hasMore}}{{/formParams}}{{/hasFormParams}}

        final String[] {{localVariablePrefix}}accepts = { {{#hasProduces}}
            {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
        {{/hasProduces}}};

        final List<MediaType> {{localVariablePrefix}}accept = {{localVariablePrefix}}apiClient.selectHeaderAccept({{localVariablePrefix}}accepts);

        final String[] {{localVariablePrefix}}contentTypes = { {{#hasConsumes}}
            {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
        {{/hasConsumes}}};

        final MediaType {{localVariablePrefix}}contentType =
            {{localVariablePrefix}}apiClient.selectHeaderContentType({{localVariablePrefix}}contentTypes);

        String[] {{localVariablePrefix}}authNames =
            new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

        {{#returnType}}ParameterizedTypeReference<{{{returnType}}}> {{localVariablePrefix}}returnType =
            new ParameterizedTypeReference<{{{returnType}}}>() {};{{/returnType}}
        {{^returnType}}ParameterizedTypeReference<Void> {{localVariablePrefix}}returnType =
            new ParameterizedTypeReference<Void>() {};{{/returnType}}
        {{#returnType}}return {{/returnType}}{{localVariablePrefix}}apiClient.invokeAPI(
            {{localVariablePrefix}}path,
            HttpMethod.{{httpMethod}},
            {{localVariablePrefix}}queryParams,
            {{localVariablePrefix}}postBody,
            {{localVariablePrefix}}headerParams,
            {{localVariablePrefix}}formParams,
            {{localVariablePrefix}}accept,
            {{localVariablePrefix}}contentType,
            {{localVariablePrefix}}authNames,
            {{localVariablePrefix}}returnType);
    }
    {{/operation}}
}
{{/operations}}
